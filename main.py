from langdetect import detect
import pyowm
import telebot
from pyowm.utils.config import get_default_config
from langdetect import DetectorFactory
from datetime import date
from datetime import timedelta

DetectorFactory.seed = 0
owm = pyowm.OWM('c573593d16b4a358d2173235964ff4bd')
bot = telebot.TeleBot("5056359791:AAGnked4PGcSXLQarE9hB7IE0h0EhawaFu8")
mgr = owm.weather_manager()
coor = owm.geocoding_manager()

@bot.message_handler(content_types=['text'])
def send_echo(message):
    lang = detect(message.text)
    if '7' not in message.text:
        if lang == "uk":
            config_dict = get_default_config()
            config_dict['language'] = 'ua'
            try:
                observation = mgr.weather_at_place(message.text)
            except pyowm.commons.exceptions.NotFoundError as notFound:
                bot.send_message(message.chat.id, '–ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ü—è, –º–æ–∂–ª–∏–≤–æ –≤–∏ –ø–æ–º–∏–ª–∏–ª–∏—Å—å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                return
            WeatherResult = observation.weather
            curr_temperature = str(WeatherResult.temperature('celsius')["temp"])
            min_temperature = str(WeatherResult.temperature('celsius')["temp_min"])
            max_temperature = str(WeatherResult.temperature('celsius')["temp_max"])
            humidity = str(WeatherResult.humidity)

            if '—Å–æ–Ω—è—á–Ω–æ' in WeatherResult.detailed_status:
                answer = "–í " + message.text + " –∑–∞—Ä–∞–∑ " + WeatherResult.detailed_status + "‚òÄÔ∏è\n\n"
            elif '–¥–æ—â' in WeatherResult.detailed_status:
                answer = "–í " + message.text + " –∑–∞—Ä–∞–∑ " + WeatherResult.detailed_status + "üåß\n\n"
            elif '—Ö–º–∞—Ä' in WeatherResult.detailed_status:
                answer = "–í " + message.text + " –∑–∞—Ä–∞–∑ " + WeatherResult.detailed_status + "‚òÅÔ∏è\n\n"
            else:
                answer = "–í " + message.text + " –∑–∞—Ä–∞–∑ " + WeatherResult.detailed_status + "\n\n"
            answer += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞—Ä–∞–∑ –±–ª–∏–∑—å–∫–æ " + curr_temperature + " ¬∞–°" + "\n\n"
            answer += "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ " + min_temperature + " ¬∞–°" + "\n\n"
            answer += "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ " + max_temperature + " ¬∞–°" + "\n\n"
            if int(humidity) > 50:
                answer += "–í–æ–ª–æ–≥—ñ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∑–Ω–æ " + humidity + "%üí¶\n\n"
            else:
                answer += "–í–æ–ª–æ–≥—ñ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∑–Ω–æ " + humidity + "%üíß\n\n"

            bot.send_message(message.chat.id, answer)
        else:
            config_dict = get_default_config()
            config_dict['language'] = 'en'
            try:
                observation = mgr.weather_at_place(message.text)
            except pyowm.commons.exceptions.NotFoundError as notFound:
                bot.send_message(message.chat.id,'No such place, maybe you spelled it wrong')
                return
            WeatherResult = observation.weather
            curr_temperature = str(WeatherResult.temperature('celsius')["temp"])
            min_temperature = str(WeatherResult.temperature('celsius')["temp_min"])
            max_temperature = str(WeatherResult.temperature('celsius')["temp_max"])
            humidity = str(WeatherResult.humidity)

            if 'sun' in WeatherResult.detailed_status:
                answer = "In " + message.text + " now " + WeatherResult.detailed_status + "‚òÄÔ∏è\n\n"
            elif 'rain' in WeatherResult.detailed_status:
                answer = "In " + message.text + " now " + WeatherResult.detailed_status + "üåß\n\n"
            elif 'clouds' in WeatherResult.detailed_status:
                answer = "In " + message.text + " now " + WeatherResult.detailed_status + "‚òÅÔ∏è\n\n"
            else:
                answer = "In " + message.text + " now " + WeatherResult.detailed_status + "\n\n"
            answer += "Temperature is now around " + curr_temperature + " ¬∞–°" + "\n\n"
            answer += "Min temperature for today is " + min_temperature + " ¬∞–°" + "\n\n"
            answer += "Max temperature for today is " + max_temperature + " ¬∞–°" + "\n\n"
            if int(humidity) > 50:
                answer += "Humidity is about " + humidity + "%üí¶\n\n"
            else:
                answer += "Humidity is about " + humidity + "%üíß\n\n"

            bot.send_message(message.chat.id, answer)
    else:
        answer = ''
        if lang == "uk":
            config_dict = get_default_config()
            config_dict['language'] = 'ua'
            try:
                observation = mgr.weather_at_place((message.text).split(' ')[0])
            except pyowm.commons.exceptions.NotFoundError as notFound:
                bot.send_message(message.chat.id, '–ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ü—è, –º–æ–∂–ª–∏–≤–æ –≤–∏ –ø–æ–º–∏–ª–∏–ª–∏—Å—å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                return
            list_locations = coor.geocode((message.text).split(' ')[0])
            one_call = mgr.one_call(list_locations[0].lat, list_locations[0].lon)

            answer += f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —É {(message.text).split(" ")[0]} –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 7 –¥–Ω—ñ–≤: \n'
            for i in range(7):
                today = date.today() + timedelta(days=i)
                answer += '–î–∞—Ç–∞: ' + str(today) + '  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: '
                answer += str(one_call.forecast_daily[i].temperature('celsius')['day'])
                answer += '¬∞–°  –ü–æ–≥–æ–¥–∞: '
                answer += str(one_call.forecast_daily[i].detailed_status)
                answer += '\n'

            bot.send_message(message.chat.id, answer)
        else:
            config_dict = get_default_config()
            config_dict['language'] = 'en'
            try:
                observation = mgr.weather_at_place((message.text).split(' ')[0])
            except pyowm.commons.exceptions.NotFoundError as notFound:
                bot.send_message(message.chat.id,'No such place, maybe you spelled it wrong')
                return
            list_locations = coor.geocode((message.text).split(' ')[0])
            one_call = mgr.one_call(list_locations[0].lat, list_locations[0].lon)

            answer += f'Weather forecast in {(message.text).split(" ")[0]} for the next 7 days: \n'
            for i in range(7):
                today = date.today() + timedelta(days=i)
                # answer += 'Date: '+ str(today) + '  Temperature: ' + str(one_call.forecast_daily[i].temperature('celsius')[
                #     'day']) + '¬∞–°  Weather: ' + str(one_call.forecast_daily[i].detailed_status)
                answer += 'Date: ' + str(today) + '  Temperature: '
                answer += str(one_call.forecast_daily[i].temperature('celsius')['day'])
                answer += '¬∞–°  Weather: '
                answer += str(one_call.forecast_daily[i].detailed_status)
                answer += '\n'

            bot.send_message(message.chat.id, answer)


bot.polling(non_stop=True)

